'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultSuccess = 'Thank you for your interest.';
var defaultError = 'There was an error process your form submission.';

var defaultMessages = exports.defaultMessages = {
  success: '',
  error: ''
};

var defaultValidate = exports.defaultValidate = function defaultValidate(form) {
  if (!form) {
    return false;
  }

  return form.checkValidity();
};

var Form = function () {
  function Form(url) {
    var messages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMessages;
    var validate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultValidate;

    _classCallCheck(this, Form);

    this.thenListeners = [];
    this.catchListeners = [];
    this.promise = undefined;
    this.messages = messages;
    this.validate = validate;

    if (!url) {
      throw new TypeError('Form::constructor - You must pass a URL.');
    }

    this.url = url;
  }

  _createClass(Form, [{
    key: 'then',
    value: function then(callback) {
      if (!(callback instanceof Function)) {
        throw new TypeError('Form::then - You must a function callback to then.');
      } else {
        this.thenListeners.push(callback);
      }

      return this;
    }
  }, {
    key: 'catch',
    value: function _catch(callback) {
      if (!(callback instanceof Function)) {
        throw new TypeError('Form::catch - You must a function callback to catch.');
      } else {
        this.catchListeners.push(callback);
      }

      return this;
    }
  }, {
    key: 'submit',
    value: function submit(form, resolve, reject) {
      var _this = this;

      var submit = new Promise(function (resolve, reject) {
        if (!_this.validate(form)) {
          reject({ error: defaultError });
        } else {
          var xhr = new XMLHttpRequest();
          xhr.open('POST', _this.url);
          xhr.onload = function () {
            var response = JSON.parse(xhr.responseText);
            if (response.error) {
              reject(response);
            } else {
              resolve(response);
            }
          };
          xhr.onerror = function () {
            return reject({ error: defaultError });
          };
          xhr.send(new FormData(form));
        }
      }).then(function (response) {
        var event = { target: form, message: _this.messages.success ? _this.messages.success : response.message };

        if (response.data) {
          event.data = response.data;
        }

        _this.thenListeners.map(function (emit) {
          emit(event);
        });

        if (resolve) {
          resolve(event);
        }
      }).catch(function (response) {
        var event = { target: form, error: _this.messages.error ? _this.messages.error : response.error };

        if (response.data) {
          event.data = response.data;
        }

        _this.catchListeners.map(function (emit) {
          emit(event);
        });

        if (reject) {
          reject(event);
        }
      });

      return false;
    }
  }]);

  return Form;
}();

exports.default = Form;